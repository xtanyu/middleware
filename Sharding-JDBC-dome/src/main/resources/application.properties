# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名g1,g2...此处可配置多数据源
spring.shardingsphere.datasource.names=g1
# 配置数据源具体内容————————包含  连接池，  驱动，             地址，   用户名，    密码
# 由于上面配置数据源只有g1因此下面只配置g1.type,g1.driver-class-name,g1.url,g1.username,g1.password
spring.shardingsphere.datasource.g1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.g1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.g1.url=jdbc:mysql://localhost:3306/test_db?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.g1.username=root
spring.shardingsphere.datasource.g1.password=876551730
# 配置表的分布，表的策略
spring.shardingsphere.sharding.tables.info.actual-data-nodes=g1.info_$->{1..2}
# 指定goods表 主键gid 生成策略为 SNOWFLAKE
spring.shardingsphere.sharding.tables.info.key-generator.column=id
spring.shardingsphere.sharding.tables.info.key-generator.type=SNOWFLAKE
# 指定分片策略 约定id值是偶数添加到goods_1表，如果gid是奇数添加到goods_2表
spring.shardingsphere.sharding.tables.info.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.info.table-strategy.inline.algorithm-expression=info_$->{id % 2+1}
# 打开sql输出日志
spring.shardingsphere.props.sql.show=true
# 配置允许后面的Bean覆盖前面名称重复的Bean
spring.main.allow-bean-definition-overriding=true
